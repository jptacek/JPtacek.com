<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JPtacek.com | Musings on code and who knows what 3ls3</title>
    <link href="http://www.jptacek.com/feed/" rel="self"/>
    <link href="http://www.jptacek.com"/>
    <updated>2015-01-06T03:00:02.823Z</updated>
    <id>http://www.jptacek.com/</id>
    <author>
        <name>John Ptacek</name>
        <email>jptacek@gmail.com</email>
    </author>

    
    <entry>
        <title>MS Dev Podcast Show - December 19, 2014</title>
        <link href="http://www.jptacek.com/2014/12/23/index/"/>
        <updated>2014-12-23T00:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-12-23,/2014/12/23/index/</id>
        <content type="html"><![CDATA[<p>I had the very cool experience of being invited to be part of the <a href="http://msdevshow.com/">MS Dev Show</a>, a Podcast focused on Microsoft Developer
Technologies hosted by <a href="https://twitter.com/carlschweitzer">Carl Schweitzer</a> and
<a href="https://twitter.com/ytechie">Jason Young</a>. I enjoy the show when I get to a chance listen and, truth be told, Jason
was one of the inspirations for me switching my blogging engine to Docpad. That means I was pretty excited to be
invited on!</p>
<p>The Podcast mostly focused on AngularJS, but we talked a bit about some of the upcoming Visual Studio changes and
ASP.NET vNext, which is going to be really cool for Microsoft Developers. You can get a hint of what is coming on one of my
recent blog posts
<a href="http://www.jptacek.com/2014/12/creating-ASP.NET-vNext-application-on-OSX/">Running ASP.NET vNext on OS X</a>.</p>
<p>You can listen to the show at
<a href="http://msdevshow.com/2014/12/angularjs-with-john-ptacek/">http://msdevshow.com/2014/12/angularjs-with-john-ptacek/</a>.
Wished I would have sounded a bit more eloquent for everyone, but kind of sleep deprived.</p>
<p>Thanks Carl and Jason!</p>
<p> <img src="http://www.jptacek.com/2014/12/23/index/msDevShowlogo@2x.png" alt="MS Dev Show Log Logo"></p>
]]></content>
    </entry>
    
    <entry>
        <title>Creating ASP.NET vNext application on OS X</title>
        <link href="http://www.jptacek.com/2014/12/12/index/"/>
        <updated>2014-12-12T00:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-12-12,/2014/12/12/index/</id>
        <content type="html"><![CDATA[<p>Santa Claus is Coming to Town!! All the geeks get pretty excited for Santa’s arrival to see what will be awaiting us under the tree
each year. However, sometimes the things geeks are most excited about aren’t ready for Christmas. We can read about them, maybe see
some snippets or even get a preview.</p>
<p>For example, there is a new Star Wars movie coming, but that will not be out until December of 2015, right before Santa’s
next visit. There are also a good percentage of geeks getting excited for the release of Apple Watch, which will be out
sometime in early 2015, so it won’t be waiting under the Christmas tree this year either.</p>
<p>However, one of the things I am most interested in, workwise, while it is arriving in 2015, is available
to kick the tires on now. The early preview present under the tree is running .NET on non-Microsoft platforms like
the OS X or Linux. So while Santa will not be putting the final version under my tree this year, we can at least start
getting ready.</p>
<p>November and December are always exceedingly busy times, but it is worth taking a moment to realize that something huge
happened. Microsoft has opened sourced their .NET framework. I am a big fan of Microsoft’s C# language. I think, for
most developers, it is a great and productive way to get work done. Having this option available on Linux and Mac
machines is going to be great. Throw in ASP.NET MVC and Web API coming along too, and 2015 will be awesome one for
developers.</p>
<p>Scott Hanselman has a <a href="http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx">blog post</a>
 where he gets into the details about the open sourcing of .NET and there is a lot to
get into. However, but for now, let us just build an ASP.Net vNext app and jump into it like a kid opening presents on
Christmas morning!</p>
<p>We are going to create an ASP.NET vNext app to countdown several things… the days until Christmas, the days
until the release of the next ASP (assuming Build 2015) and finally, the days until new Star Wars movie.</p>
<p>How do we jump in? These steps are mostly identified on the ASP.NET GitHub page (I know, crazy, right. Microsoft
documenting stuff on GitHub!?!?) at <a href="https://github.com/aspnet/home">https://github.com/aspnet/home</a>. We can still step through.</p>
<p>First, because vocabulary is important…. Since the codename for the next version of ASP.NET vNext is Katana,
Microsoft is going all in with the letter K. So many of the tools utilize the letter K. A quick run through of the
most important.</p>
<ul>
<li><p>KRE is the K Runtime Environment. This is the code that bootstraps your ASP.NET vNext application; compilers,
Common Language Runtime (CLR), etc.</p>
</li>
<li><p>KVM is the K Version Manager. It will install appropriate version of the KRE. You will be able to have multiple ASP.NET vNext runtimes and applications running on your machine.</p>
</li>
<li><p>KPM is the K Package Manager. This will download packages needed for your application to run.</p>
</li>
</ul>
<p>First thing to do is ensure you have Homebrew setup on your OS X machine. If you are doing development work, you most likely have this already, so we will assume you are ready to go.</p>
<p>Next, we need to install the ASP.NET vNext runtime environment (KRE). This is done by downloading appropriate git repositories via a bash script.</p>
<pre class="highlight"><code class="hljs bash">brew tap aspnet/k
</code></pre>
<p>Similar commands are used for other platforms such as Linux and Windows, which uses PowerShell.</p>
<p>The next step is to install KVM (The K Version Manager), which is the runtime manager. It is responsible for getting the runtime and enables multiple different runtimes on the same machine. I have seen some mention of issues using KVM on OS X with different shells, like zsh. I use the Bash shell and have not run into issues. To install KVM type</p>
<pre class="highlight"><code class="hljs bash">brew install kvm
</code></pre>
<p>Next we run a script to setup our environment variables, etc</p>
<pre class="highlight"><code class="hljs bash"><span class="hljs-built_in">source</span> kvm.sh
</code></pre>
<p>We have pretty quickly setup and downloaded the environment to run ASP.NET vNext apps on an OS X machine, but, we have
no code! Thankfully, someone wrote an ASP.NET MVC Project Generator for Yeoman. Yeoman, for those of you not familiar,
is a tool to generate scaffolding for your projects. It utilizes Node.js.</p>
<p>So to get all of this working, you are going to need to have Node.JS and the Node Package Manager (NPM) installed.
Again, since we are talking developers, you probably already have all of this. The next step then is to install
Yeoman, using NPM. From your Bash shell we will install Yeoman first</p>
<pre class="highlight"><code class="hljs bash">npm install –g yo
</code></pre>
<p>Next, we install the generator for ASP.Net</p>
<pre class="highlight"><code class="hljs bash">npm install -g generator-aspnet
</code></pre>
<p>Next step, since we have all of the tools we need installed and downloaded, we can generate our application. This is done by running Yeoman from the bash shell type by typing</p>
<pre class="highlight"><code class="hljs bash">yo aspnet
</code></pre>
<p><img src="http://www.jptacek.com/2014/12/12/index/osx1.png" alt="Running Yeoman, step1, choose MVC"></p>
<p>We have the option of choosing a console application, a Web App, MVC app or Nancy ASP.NET app. We choose MVC
application and provide a name</p>
<p><img src="http://www.jptacek.com/2014/12/12/index/osx2.png" alt="Running Yeoman, step2, choose Project Name"></p>
<p>And our application gets generated</p>
<p><img src="http://www.jptacek.com/2014/12/12/index/osx3.png" alt="Running Yeoman, step3, application is generated"></p>
<p>And we can take a look and see our directory structure, with many of the controllers and views most of us know from
our MVC projects.</p>
<p><img src="http://www.jptacek.com/2014/12/12/index/osx4.png" alt="After Running Yeoman, step last, tree view"></p>
<p>For those of you well versed in ASP.NET, a couple of pretty interesting things to note. First, no solution file!
Second, no Project file! Most of the Visual Studio generate file constructs are gone. Similar to a Node.JS
application, there is a json file outlining the dependencies needed for an application, as opposed to the Solution
and Project files of Visual Studio. Very cool.</p>
<p>To build and run the application, we use the commands shown in the previous screen shot of the bash shell</p>
<p><code>kpm restore</code>, which gets the packages for your application</p>
<p><code>kpm build</code>, builds the application</p>
<p><code>k kestrel</code>, fires up the web server to serve the pages</p>
<p>By using the kestrel web server we are actually firing up Mono, the open source version of the .NET framework.
We access the location locally on port 5004 (<a href="http://localhost:5004/">http://localhost:5004/</a>)</p>
<p><img src="http://www.jptacek.com/2014/12/12/index/osx5.png" alt="MVC app on OS X"></p>
<p>So that is all kind of Christmas goodies Santa has for us, what is the most impressive programming language
for business development being able to run on non-Microsoft platforms. When you start thinking about integrating in
with some popular Linux tools like Docker, it doesn’t take a lot to realize things will be a lot different on the .NET
stack when Santa is coming back to town in 2015. Plus, new Star Wars!</p>
<p>You can download this code from a GitHub repository I have setup at
<a href="https://github.com/jptacek/ChristmasCountdown">https://github.com/jptacek/ChristmasCountdown</a></p>
<p>Note: When running the web site, it will use the same port for the web server. I usually exit the process (k kestrel) by typing Ctrl-Z.
However, I need to list the processes using PS and then kill, by typing kill -9 <pid>, the process that is mono.
That way I can restart.</pid></p>
<p><strong>UPDATE (December 17, 2014)</strong> - Links updated to include link to Microsoft <a href="http://blogs.msdn.com/b/webdev/archive/2014/12/17/yeoman-generators-for-asp-net-vnext.aspx">post</a> on Yeoman</p>
<p><strong>UPDATE 2 (December 18, 2014)</strong> - Thanks to <a href="https://twitter.com/sayedihashimi">Sayed Hashimi</a> for helping clean up some typos
with case issues.
<a href="https://twitter.com/sayedihashimi/status/545720905171603456">https://twitter.com/sayedihashimi/status/545720905171603456</a></p>
<p>Links</p>
<ul>
<li>ASP.NET MVC Project Generator for Yeoman - <a href="http://hassakarn.com/2014/02/07/asp-net-mvc-project-generator-for-yeoman/">http://hassakarn.com/2014/02/07/asp-net-mvc-project-generator-for-yeoman/</a></li>
<li>Yeoman - <a href="http://yeoman.io/">http://yeoman.io/</a></li>
<li>ASP.NET GitHub repo - <a href="https://github.com/aspnet/home">https://github.com/aspnet/home</a></li>
<li>OmniSharp.NET - <a href="http://www.omnisharp.net/">http://www.omnisharp.net/</a></li>
<li>GitHub for this Code - <a href="https://github.com/jptacek/ChristmasCountdown">https://github.com/jptacek/ChristmasCountdown</a></li>
<li>Microsoft on Yeoman for ASP.NET - <a href="http://blogs.msdn.com/b/webdev/archive/2014/12/17/yeoman-generators-for-asp-net-vnext.aspx">http://blogs.msdn.com/b/webdev/archive/2014/12/17/yeoman-generators-for-asp-net-vnext.aspx</a></li>
</ul>
<p>This blog post originally appeared at <a href="http://www.skylinetechnologies.com/Blog/Article/2586/12-Days-of-Christmas-Mac.aspx">Skyline Technologies</a>
as part of their <a href="http://www.skylinetechnologies.com/Blog/Article/2586/12-Days-of-Christmas-Mac.aspx">12 Blogs of Christmas series</a></p>
]]></content>
    </entry>
    
    <entry>
        <title>AngularJS - Further with Directives</title>
        <link href="http://www.jptacek.com/2014/12/10/index/"/>
        <updated>2014-12-10T00:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-12-10,/2014/12/10/index/</id>
        <content type="html"><![CDATA[<p><a href="http://www.angularjs.org">AngularJS</a> is a Javascript MVC framework from the fine folks over at
<a href="http://www.google.com">Google</a>. The focus of Angular is building complex
 HTML based client applications. Its design philosophy is data first, where your data will be updating the DOM.
 Contrast this to a framework like JQuery where the DOM will update your data.</p>
<p><img src="http://www.jptacek.com/2014/12/10/index/angularLogo.png" alt="AngularJS Logo"></p>
<p>This is the tenth (I know, right!!?!!?!) in a series of posts on AngularJS where we are using Chemistry data from the periodic table
to help us understand the framework. The others posts are</p>
<ol>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introduction/">AngularJS - Introduction</a></li>
<li><a href="http://www.jptacek.com/2013/10/introducing-angularjs-controllers/">AngularJS - Introducing AngularJS Controllers</a></li>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introducing-ng-repeat/">AngularJS - Introducing NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-further-with-ng-repeat/">AngularJS - More with NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-lou-reed/">AngularJS - Image Binding</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-templates/">AngularJS - Introducing Templates</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-IntroToRouting/">AngularJS - Introducing Routing</a></li>
<li><a href="http://www.jptacek.com/2014/05/angularJS-Intro-To-Services/">AngularJS - Introduction to Services</a></li>
<li><a href="http://www.jptacek.com/2014/06/angularJS-intro-to-directives/">AngularJS - Introduction to Directives</a></li>
<li>AngularJS - Further with Directives</li>
</ol>
<blockquote>
<p>Note: AngularJS does not allow for more than one ng-app directive. When I have multiple angular posts on
the home page of my blog, only one application will work. I need to refactor the entire site to account for
this. All of that to say this, you are best clicking on a single article so you can see the pages in action.</p>
</blockquote>
<p>Previously, we took an introductory look at directives. This time we will go a bit deeper.</p>
<p>In our previous example, we displayed data from the periodic table, specifically, the atomic weight, atomic number
and element name. Our data source, has a lot more information, such as boiling and melting points, density, etc. In
this example, we will expand the directive by enabling a click event to display expanded data about the selected element.</p>
<p>The first thing to mention is scope. Scope, as we have already seen, is the magical tool that Angular uses to 
communicate between your view and services, etc. By default, a directive does not get a new child scope, but
uses the parent scope. So, in our case, when the directive is inside a controller, it will use the 
controller&#39;s scope.</p>
<p>To get access to the scope, we can use the <code>link</code> function. The <code>link</code> function gets called every time the 
element gets bound to the data in the <code>$scope</code> object. In general, <code>link</code> is used to manipulate the Document
Object Model (DOM),
either by adding event listeners or updating the DOM.</p>
<p>The link function takes three arguments:</p>
<ul>
<li><code>scope</code> - Scope gets passed to the directive. This is generally the scope of the calling controller</li>
<li><code>elem</code> - The element on which the directive is derived. In our case, it will be the template markup for
the chemical element</li>
<li><code>attrs</code> - Attributes associated with our element</li>
</ul>
<p>It is worth noting that AngularJS ships with jQLite, which is a subset of the full 
<a href="http://jquery.com/">jQuery</a> library. If you are using full
jQuery within your web app, then that will be used instead. All of that to say this, you access DOM elements 
similarly as you do in jQuery, and since jQuery is already wrapped, you don&#39;t need to use your old school
<code>$</code> for access.</p>
<p>In our example, we are going to use the <code>link</code> function to manipulate the DOM. First, let us take a look
at the JavaScript</p>
<pre class="highlight"><code class="hljs javascript">chemistryApp.directive(<span class="hljs-string">'periodicChartElement'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(chemistryService)</span> {</span>;
    <span class="hljs-keyword">return</span> {
        restrict: <span class="hljs-string">'E'</span>,
        templateUrl: <span class="hljs-string">'./template/periodic-template.html'</span>,
        link: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(scope, elem, attrs)</span> {</span>
            elem.bind(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                <span class="hljs-comment">// Change state</span>
                scope.$apply(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
                    scope.fullElement = !(scope.fullElement);
                });

            });
            elem.bind(<span class="hljs-string">'mouseover'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                elem.css(<span class="hljs-string">'cursor'</span>, <span class="hljs-string">'pointer'</span>);
            });

        },
        scope:{
            element:<span class="hljs-string">'='</span>
        }

    }

});
</code></pre>
<p>With the exception of adding the link function, things are pretty similar to before. The link function does several 
pieces of functionality that are worth nothing though.</p>
<p>First, we bind a click event to our chemical element. When
that click event is called, we update a boolean variable on our scope, which is our parent scope from the calling 
controller and set it to the opposite. Second, we also bind a mouseover event to manipulate our CSS to change the 
 cursor to a pointer. As you can see, this is an elegant way to add event behavior to our directive.</p>
<p>Our template has now also been updated. The boolean scope variable that we update on the click event, 
<code>fullElement</code> is used to show one of two different
HTML &quot;paths&quot; in our template, one shows a small subset of data, the other a larger subset of data from the periodic 
table. </p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">'periodicCell {{element.cssForDisplay}}'</span> <span class="hljs-attribute">data-ng-hide</span>=<span class="hljs-value">"fullElement"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicNumber"</span>&gt;</span>{{element.atomicNumber}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicWeight"</span>&gt;</span>{{element.atomicWeight}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicSymbol"</span>&gt;</span>{{element.symbol}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"centerElementDisplay"</span>&gt;</span>{{element.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">'periodicPop {{element.cssForDisplay}}'</span>  <span class="hljs-attribute">data-ng-show</span>=<span class="hljs-value">"fullElement"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicNumberPop"</span>&gt;</span>{{element.atomicNumber}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicWeightPop"</span>&gt;</span>{{element.atomicWeight}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"atomicSymbolPop"</span>&gt;</span>{{element.symbol}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"density"</span>&gt;</span>{{element.density || '-'}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"meltingPoint"</span>&gt;</span>{{element.melting + 273.15|number:2}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"boilingPoint"</span>&gt;</span>{{element.boiling + 273.15|number:2}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"elecConfig"</span>&gt;</span>{{element.elecconfig }}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"elctroNeg"</span>&gt;</span>{{element.electronegativity}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"centerElementDisplayPop"</span>&gt;</span>{{element.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>It is also worth talking a bit about scope in directives. As we mentioned earlier, by default, you are binding to the parent scope of the controller.
In many instances this will work well, but if you want to display your directive more than once on a page, you would need a 
controller for each directive. That is no good. </p>
<p>AngularJS introduces the ability to create an isolated scope, which is what we are doing in our example. This allows us
to use our directive multiple times on the same page. There are binding options in setting up the directive variables that we should
briefly touch on.</p>
<p>The various options for
setting up variables in the directive scope are:</p>
<ul>
<li><code>=</code> - Set up two way binding between the parent scope and our isolated scope</li>
<li><code>@</code> - Set up one way binding between the parent scope adn the isolate scope</li>
<li><code>&amp;</code> - Allows to bind to parent scope functions</li>
</ul>
<p>Dan Wahlin has done an outstanding job on his blog of digging in deeper into directives and scope. His articles are at</p>
<ol>
<li><a href="http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-i-the-fundamentals">Creating Custom AngularJS Directives Part I – The Fundamentals</a></li>
<li><a href="http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-2-isolate-scope">Creating Custom AngularJS Directives Part 2 – Isolate Scope</a></li>
<li><a href="http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-3-isolate-scope-and-function-parameters">Creating Custom AngularJS Directives Part 3 - Isolate Scope and Function Parameters</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-4-transclusion-and-restriction">Creating Custom AngularJS Directives Part 4 - Transclusion and Restriction</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-7-%E2%80%93-creating-a-unique-value-directive-using-asyncvalidators">Creating Custom AngularJS Directives Part 7 – Creating a Unique Value Directive using $asyncValidators</a></li>
</ol>
<p>Parts 5 and 6 should be coming too.</p>
<p>We also have updated our page to show multiple elements to demonstrate a single directive interacting with unique scope. It
is not very robust, so picking items at the end, aka Curium, will cause some issues.</p>
<div id="app" ng-app="chemistryApp">
    <div id="controller" ng-controller="chemistryController">

        <div class="row">
            <select ng-model="periodicElement" ng-options="e.name for e in elements" ng-click="updateController(periodicElement)"></select><br>
        </div>
        <div class="row">
            &nbsp;
        </div>
        <div class="row">
            &nbsp;
        </div>
        <div class="row">
            <div class="col-md-2">
                <periodic-chart-element element="periodicElement"></periodic-chart-element>
            </div>
            <div class="col-md-2">
                &nbsp;
            </div>
            <div class="col-md-2">
                <periodic-chart-element element="elements[periodicElement.atomicNumber]"></periodic-chart-element>
            </div>
            <div class="col-md-2">
                &nbsp;
            </div>
            <div class="col-md-2">
                <periodic-chart-element element="elements[periodicElement.atomicNumber+1]"></periodic-chart-element>
            </div>
        </div>
    </div>
</div>

<p><br></p>
<p>So to recap, with directives we have created our HTML markup element <code>periodic-chart-element</code> where we can put multiple elements
onto a single page by updating our directive to use its own version of scope.</p>
<p>It has been several months since my last Angular blog post. More are coming. I have a plan for all of this, ultimately we
will create an application that is the periodic table, done AngularJS style.</p>
<p>You can either visit <a href="http://angularperiodic.azurewebsites.net/">http://angularperiodic.azurewebsites.net/</a> to see the code in action and
as always find the code out on <a href="https://github.com/jptacek/AngularPeriodic">GitHub</a>.</p>
<p>Thanks for reading!</p>
<script type="text/javascript" src="/2014/12/angularJS-further-with-directives/js/chemistryApp.js"></script>
<script type="text/javascript" src="/2014/12/angularJS-further-with-directives/js/chemistryController.js"></script>
<script type="text/javascript" src="/2014/12/angularJS-further-with-directives/js/chemistryService.js"></script>
<script type="text/javascript" src="/2014/12/angularJS-further-with-directives/js/chemistryDirective.js"></script>]]></content>
    </entry>
    
    <entry>
        <title>2014 That Conference</title>
        <link href="http://www.jptacek.com/2014/08/12/index/"/>
        <updated>2014-08-12T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-08-12,/2014/08/12/index/</id>
        <content type="html"><![CDATA[<p>Thanks to everyone wbo attended my That Conference talk this year. I enjoyed the conversations about the talk during and 
throughout the day.</p>
<p>The slides are available at <a href="http://www.jptacek.com/2014/08/12/index/2014-That-Conference.pptx">http://www.jptacek.com/2014/08/2014-that-conference-presentation/2014-That-Conference.pptx</a></p>
<p><img src="http://www.jptacek.com/2014/08/12/index/ThatConf.jpg" alt="Clark Sell playing flappy bird"></p>
]]></content>
    </entry>
    
    <entry>
        <title>The Long Good Bye to Windows Phone</title>
        <link href="http://www.jptacek.com/2014/07/10/index/"/>
        <updated>2014-07-10T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-07-10,/2014/07/10/index/</id>
        <content type="html"><![CDATA[null]]></content>
    </entry>
    
    <entry>
        <title>AngularJS - Introduction to Directives</title>
        <link href="http://www.jptacek.com/2014/06/03/index/"/>
        <updated>2014-06-03T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-06-03,/2014/06/03/index/</id>
        <content type="html"><![CDATA[<p><a href="http://www.angularjs.org">AngularJS</a> is a Javascript MVC framework from the fine folks over at
<a href="http://www.google.com">Google</a>. The focus of Angular is building complex
 HTML based client applications. Its design philosophy is data first, where your data will be updating the DOM.
 Contrast this to a framework like JQuery where the DOM will update your data.</p>
<p><img src="http://www.jptacek.com/2014/06/03/index/angularLogo.png" alt="AngularJS Logo"></p>
<p>This is the ninth in a series of posts on AngularJS where we are using Chemistry data from the periodic table
to help us understand the framework. The others posts are</p>
<ol>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introduction/">AngularJS - Introduction</a></li>
<li><a href="http://www.jptacek.com/2013/10/introducing-angularjs-controllers/">AngularJS - Introducing AngularJS Controllers</a></li>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introducing-ng-repeat/">AngularJS - Introducing NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-further-with-ng-repeat/">AngularJS - More with NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-lou-reed/">AngularJS - Image Binding</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-templates/">AngularJS - Introducing Templates</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-IntroToRouting/">AngularJS - Introducing Routing</a></li>
<li><a href="http://www.jptacek.com/2014/05/angularJS-Intro-To-Services/">AngularJS - Introduction to Services</a></li>
<li>AngularJS - Introduction to Directives</li>
<li><a href="http://www.jptacek.com/2014/12/angularJS-further-with-directives/">AngularJS - Further with Directives</a></li>
</ol>
<blockquote>
<p>Note: AngularJS does not allow for more than one ng-app directive. When I have multiple angular posts on
the home page of my blog, only one application will work. I need to refactor the entire site to account for
this. All of that to say this, you are best clicking on a single article so you can see the pages in action.</p>
</blockquote>
<p>On the AngularJS <a href="https://angularjs.org/">homepage</a> you see the claim that Angular is &quot;HTML Enhanced for Web Apps!&quot;
What does this actually mean though? For me, it means directives, which allow us to extend HTML and create new HTML
markup. Let us pretend and call it our own HTML 6.</p>
<p><img src="http://www.jptacek.com/2014/06/03/index/htmlEnhanced.png" alt="AngularJS HomePage"></p>
<p>HTML, when initially created, was a subset of SGML, which is popular in the print industry. HTML, especially in the early
days, kept a lot of the print mentality. However, during the period when Web 2.0 applications emerged, it became 
obvious that HTML was moving way
beyond it&#39;s print background and becoming an application platform itself. </p>
<p>Given it&#39;s print background and laborious standards process that defines the HTML specification, HTML is relatively fixed 
platform. Your chances of getting a new tag into the standard for use in your application in the next ten years are 
pretty close to zero. However, Google starts earning the superheroic name it gave AngularJS by solving this problem with 
directives. To my knowledge, they are the only JavaScript framework that enables you to do this so far.</p>
<p>While we have seen directives previously, they have been attributes that allow us to markup existing HTML elements with
bits and pieces of Angular functionality. Examples of this have been <code>ng-show</code> or <code>ng-repeat</code>. For this post, we are
going to make a custom directive, which will allow us to create our own HTML tag. </p>
<p>The value of creating our own tags, is that it allows us to 
start thinking of our HTML markup as a domain specific language. Throughout this series, we have been using Chemistry data
to explore Angular. In keeping with that theme, we are going to create a simple custom directive to display chemical 
data in its own &quot;HTML&quot; tag called <code>periodicchartelement</code>. Cool things are starting to happen here people!</p>
<p>So how do we do this? First, similar to controllers, directives are defined on the module for our application via the 
<code>module.directive</code> API. Within here, we can setup a small template. Our JavaScript would look something like</p>
<pre class="highlight"><code class="hljs javascript">.directive(<span class="hljs-string">'periodicchartelement'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> {
      template: <span class="hljs-string">'Name: {{element.name}} Atomic Weight: {{element.weight}}'</span>
    };
  });
</code></pre>
<p>Of course, we can break the template into its own file by using templateUrl as we have discussed 
<a href="http://www.jptacek.com/2014/02/angularJS-templates/">earlier</a>, which is the preferred approach.</p>
<p>We next define what part of our HTML our directive will be expanding. We do this by using <code>restrict</code> to 
indicate the DOM element we are creating from the following options</p>
<ul>
<li><code>&#39;A&#39;</code> - The attribute of a DOM element. for example  <code>&lt;div periodicchartelement=&quot;element&quot;&gt;</code></li>
<li><code>&#39;C&#39;</code> - class name </li>
<li><code>&#39;E&#39;</code> - A new element name, for example  <code>&lt;periodicchartelement&gt;&lt;/periodicchartelement&gt;</code></li>
</ul>
<p>There is also the ability creative directives tied to HTML comments with <code>restrict:M</code>. The restrict keyword
can also be combined together to in a manner such as <code>ACM</code>, indicating the directive applies to attributes, classes, 
and comments.</p>
<pre class="highlight"><code class="hljs javascript">.directive(<span class="hljs-string">'periodicchartelement'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> {        
    restrict: <span class="hljs-string">'E'</span>,
      template: <span class="hljs-string">'Name: {{element.name}} Atomic Weight: {{element.weight}}'</span>
    };
  });
</code></pre>
<p>Our directive function now creates a new HTML element, <code>periodicchartelement</code>. </p>
<p>For the example we are creating, we have changed a few things in comparison to previous posts. 
Based on our <a href="http://www.jptacek.com/2014/05/angularJS-Intro-To-Services/">introduction of services</a>
 last time, we have wrapped our periodic data in a service with a function called <code>getElements()</code>. Second, we have expanded the properties 
 of our JSON object used in the application to include fields about the periodicity of chemical elements. Here is an example</p>
<pre class="highlight"><code class="hljs javascript">  {<span class="hljs-string">"atomicNumber"</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Hydrogen"</span>,
  <span class="hljs-string">"atomicWeight"</span>: <span class="hljs-number">1.00794</span>,
  <span class="hljs-string">"phase"</span>: <span class="hljs-string">"Gas"</span>,
  <span class="hljs-string">"ionization"</span>: <span class="hljs-number">13.5984</span>,
  <span class="hljs-string">"melting"</span>: -<span class="hljs-number">259.14</span>,
  <span class="hljs-string">"boiling"</span>: -<span class="hljs-number">252.87</span>,
  <span class="hljs-string">"electronegativity"</span>: <span class="hljs-number">2.2</span>,
  <span class="hljs-string">"type"</span>: <span class="hljs-string">'Non Metal'</span>,
  <span class="hljs-string">"group"</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">"group2"</span>: <span class="hljs-string">'IA'</span>,
  <span class="hljs-string">"period"</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">"elecconfig"</span>: <span class="hljs-string">'1s1'</span>,
  <span class="hljs-string">"symbol"</span>: <span class="hljs-string">'H'</span>},
</code></pre>
<p>With that in place, let&#39;s create a directive that will allow us to display an element from the periodic table.</p>
<p>The first step is to create the directive function, we will create a new file, chemistryDirective.js and then hang 
the directive off of our module and call it <code>`periodicchartelement</code></p>
<pre class="highlight"><code class="hljs javascript">chemistryApp.directive(<span class="hljs-string">'periodicchartelement'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(chemistryService)</span> {</span>;
    <span class="hljs-keyword">return</span> {
        restrict: <span class="hljs-string">'E'</span>,
        templateUrl: <span class="hljs-string">'/2014/06/angularJS-intro-to-directives/template/periodic-template.html'</span>,
        scope:{
            element:<span class="hljs-string">'='</span>,
            cssType:<span class="hljs-string">'=csstypeclass'</span>
        }

    }

});
</code></pre>
<p>You will notice several things. First, we are using the <code>restrict</code> keyword to explicitly identify this as a
HTML element by using the value of <code>E</code>. Second, we are loading a HTML template for display. Last, we are passing in two items, the element 
from our JSON object and a cssType, which is a function from our scope to display our CSS class.</p>
<p>Our HTML markup is pretty basic. Notice though where we are setting a CSS class using <code>ng-class</code> and binding to the value 
of cssType.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">'periodicCell'</span> <span class="hljs-attribute">ng-class</span>=<span class="hljs-value">"cssType"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"text-align: left"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">small</span>&gt;</span>{{element.atomicNumber}}<span class="hljs-tag">&lt;/<span class="hljs-title">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>&amp;nbsp;&amp;nbsp; <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"text-align: right"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">small</span>&gt;</span>{{element.atomicWeight}}<span class="hljs-tag">&lt;/<span class="hljs-title">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-size:24px;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">strong</span>&gt;</span>{{element.symbol}}<span class="hljs-tag">&lt;/<span class="hljs-title">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">small</span>&gt;</span>{{element.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Our CSS type is then a function that determines the CSS class based on the type of element and is defined in our
service, <code>chemistryService.js</code></p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> getCssClassElement = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">( elementType)</span> {</span>
        <span class="hljs-keyword">var</span> cssClass = <span class="hljs-string">''</span>;
        elementType = elementType.toLowerCase();
        cssClass = elementType;
        <span class="hljs-keyword">switch</span> (elementType) {
            <span class="hljs-keyword">case</span> <span class="hljs-string">'metalloids'</span>:
                cssClass = <span class="hljs-string">'metalloids'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'alkali metal'</span>:
                cssClass = <span class="hljs-string">'alkaliMetal'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'non metal'</span>:
                cssClass = <span class="hljs-string">'nonMetal'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'noble gas'</span>:
                cssClass = <span class="hljs-string">'nobleGas'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'halogen'</span>:
                cssClass = <span class="hljs-string">'halogen'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'alkaline earth'</span>:
                cssClass = <span class="hljs-string">'alkalineEarth'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'poor metal'</span>:
                cssClass = <span class="hljs-string">'poorMetal'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'rare earth metal'</span>:
                cssClass = <span class="hljs-string">'lathanoids'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'transition metal'</span>:
                cssClass = <span class="hljs-string">'actinoids'</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-string">'alkaline earth metal'</span>:
                cssClass = <span class="hljs-string">'poorMetal'</span>;
                <span class="hljs-keyword">break</span>;
        }
        <span class="hljs-keyword">return</span> cssClass;
    };
</code></pre>
<p><div id="app" ng-app="chemistryApp">
    <div id="app" ng-controller="chemistryController">
    <div class="row">
            <select ng-model="periodicElement" ng-options="e.name for e in elements" ng-click="updateController(periodicElement)"></select><br>
            </div>
            <div class="row">
                &nbsp;
            </div>
            <div class="row">
            <div class="col-md-2">
                <periodicchartelement element="periodicElement" csstypeclass="getCssClassElement"></periodicchartelement>
                </div>
            <div class="col-md-3">
                <div class="metalloids"><b>Metalloids</b></div>
                <div class="alkaliMetal"><b>Alkali Metal</b></div>
                <div class="nonMetal"><b>Non Metal</b></div>
                <div class="nobleGas"><b>Noble Gas</b></div>
                <div class="halogen"><b>Halogen</b></div>
                <div class="alkalineEarth"><b>Alkaline Earth</b></div>
                <div class="poorMetal"><b>Poor Metal</b></div>
                <div class="lathanoids"><b>Rare Earth Metal</b></div>
                <div class="actinoids"><b>Transition Metal</b></div>
                <div class="poorMetal"><b>Alkaline Earth Metal</b></div>
                </div>
            </div>
    </div>
</div>
<br>
We have now created a new HTML element! It displays the atomic number, the atomic weight, atomic symbol and the name from 
our JSON object of periodic data. Based on the element type, we then color code the element appropriately.</p>
<p>This is the  most basic of introductions of creating <a href="https://docs.angularjs.org/guide/directive">directives</a> with AngularJS,
 next time, we will dig in deeper!</p>
<p>You can either visit <a href="http://angularperiodic.azurewebsites.net/">http://angularperiodic.azurewebsites.net/</a> to see the code in action and
as always find the code out on <a href="https://github.com/jptacek/AngularPeriodic">GitHub</a>.</p>
<script type="text/javascript" src="/2014/06/angularJS-intro-to-directives/js/chemistryApp.js"></script>
<script type="text/javascript" src="/2014/06/angularJS-intro-to-directives/js/chemistryController.js"></script>
<script type="text/javascript" src="/2014/06/angularJS-intro-to-directives/js/chemistryService.js"></script>
<script type="text/javascript" src="/2014/06/angularJS-intro-to-directives/js/chemistryDirective.js"></script>]]></content>
    </entry>
    
    <entry>
        <title>AngularJS - Introduction to Services</title>
        <link href="http://www.jptacek.com/2014/05/19/index/"/>
        <updated>2014-05-19T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-05-19,/2014/05/19/index/</id>
        <content type="html"><![CDATA[<p><a href="http://www.angularjs.org">AngularJS</a> is a Javascript MVC framework from the fine folks over at
<a href="http://www.google.com">Google</a>. The focus of Angular is building complex
 HTML based client applications. Its design philosophy is data first, where your data will be updating the DOM.
 Contrast this to a framework like JQuery where the DOM will update your data.</p>
<p><img src="http://www.jptacek.com/2014/05/19/index/angularLogo.png" alt="AngularJS Logo"></p>
<p>This is the eight in a series of posts on AngularJS where we are using Chemistry data from the periodic table
to help us understand the framework. The others posts are</p>
<ol>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introduction/">AngularJS - Introduction</a></li>
<li><a href="http://www.jptacek.com/2013/10/introducing-angularjs-controllers/">AngularJS - Introducing AngularJS Controllers</a></li>
<li><a href="http://www.jptacek.com/2013/10/angularjs-introducing-ng-repeat/">AngularJS - Introducing NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-further-with-ng-repeat/">AngularJS - More with NG-Repeat</a></li>
<li><a href="http://www.jptacek.com/2014/01/angularjs-lou-reed/">AngularJS - Image Binding</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-templates/">AngularJS - Introducing Templates</a></li>
<li><a href="http://www.jptacek.com/2014/02/angularJS-IntroToRouting/">AngularJS - Introducing Routing</a></li>
<li>AngularJS - Introduction to Services</li>
<li><a href="http://www.jptacek.com/2014/06/angularJS-intro-to-directives/">AngularJS - Introduction to Directives</a></li>
<li><a href="http://www.jptacek.com/2014/12/angularJS-further-with-directives/">AngularJS - Further with Directives</a></li>
</ol>
<blockquote>
<p>Note: AngularJS does not allow for more than one ng-app directive. When I have multiple angular posts on
the home page of my blog, only one application will work. I need to refactor the entire site to account for
this. All of that to say this, you are best clicking on a single article so you can see the pages in action.</p>
</blockquote>
<p>In AngularJS, when we want to create common code to be shared across our application, we create services. In the Angular world,
the controller is the traffic cop, which directs data to your view for binding. Logic for retrieving that data falls to a
service.</p>
<p>Services are stateless object that have shared functions that can be used in multiple controllers or views. The functions on
services are also available throughout; they can be accessed in directives, controllers, filters, etc.</p>
<p>For an example of a real world service that I have used in the past…. When creating a select list in HTML for an AngularJS
application, you usually have an ID associated with a selected element from the list. Often you will
display all the properties of the JSON object. In JavaScript, to find this element, you need to loop through all
the elements in an array until you get a match on the key.  Depending on the size of your application, you end up writing this
logic many, many times. To minimize this, I have written a helper application that creates an array that allows for
 an element to be accessed by a key value, thus reducing the need for repetitive array looping.</p>
<p>Generally, there are two ways to create services within your application. The most common is to use <code>module.service</code> within
 your application. The second is <code>module.factory</code>. There are a couple of other ways, but we will skip those. AngularJS
 services are really singleton objects. The object from services are then available across your application via dependency
 injection, which we will look at soon.</p>
<p> The main difference between the two service creation methods is how they are used. The <code>module.service</code> approach creates an
 instance of a function. A good use case for this approach is the generic array lookup function mentioned above. The
 <code>module.factory</code> approach is that the returned value is returned by invoking a function reference. This essentially allows you
 to treat the service like a class that you can new to make new instances.</p>
<p>The syntax for <code>module.service</code> is</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> chemistryApp = angular.module(<span class="hljs-string">'chemistryApp'</span>, []);

<span class="hljs-comment">//</span>
chemistryApp.service(<span class="hljs-string">'chemistryService'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    <span class="hljs-keyword">this</span>.elementName= <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(element)</span>{</span>
        <span class="hljs-keyword">return</span> element.name;
    };
});

<span class="hljs-comment">//</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChemCtrl</span><span class="hljs-params">($scope, chemistryService)</span>
{</span>
    ...
    $scope.nameFromService = chemistryService.elementName(elements[<span class="hljs-number">0</span>]);
}
</code></pre>
<p>The syntax for <code>module.factory</code> is</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> chemistryApp = angular.module(<span class="hljs-string">'chemistryApp'</span>, []);

<span class="hljs-comment">//</span>
chemistryApp.factory(<span class="hljs-string">'chemistryService'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
      <span class="hljs-keyword">return</span> {
            nameFromService: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(element)</span>{</span>
               <span class="hljs-keyword">return</span> element.name;
            }
        }
    });

<span class="hljs-comment">//</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChemCtrl</span><span class="hljs-params">($scope, chemistryService)</span>
{</span>
    ...
    $scope.nameFromFactory = chemistryService.elementName(elements[<span class="hljs-number">0</span>]);
}
</code></pre>
<p>Once we create our service, we want to be able to use this within our application. This is done via the magical gremlins
that drive the Dependency Injection model in AngularJS. We just pass the service name to our controller when we instantiate
it. We showed this above, but just to be sure, by passing <code>chemistryService</code> to the controller, it is service is
available within the
controller scope</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChemCtrl</span><span class="hljs-params">($scope, chemistryService)</span>
{</span>
    ...
    $scope.nameFromFactory = chemistryService.elementName(elements[<span class="hljs-number">0</span>]);
}
</code></pre>
<p>Let&#39;s look at a more advanced scenario. I am pretty much stealing this demo from my
<a href="http://www.SkylineTechnologies.com">Skyline Technologies</a>
colleague <a href="https://twitter.com/bmahloch">Brian Mahloch</a>. Brian came up with a great demo for demonstrating services
using the Periodic Data, which he kindly let me steal.</p>
<p>What we are going to do is determine the type of bonds two elements would make, based on the differences in their
electronegativity. We will create a service that does two things, calculate the differences in electronegativty and then
based on the difference determine the type of bond.</p>
<p>Our service then looks like</p>
<pre class="highlight"><code class="hljs javascript">chemistryApp.service(<span class="hljs-string">'chemistryService'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>

    <span class="hljs-keyword">this</span>.calculateElectronegativityDifference = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(element1, element2)</span> {</span>

        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(element1.electronegativity - element2.electronegativity);

    };

    <span class="hljs-keyword">this</span>.convertElectronegativityDifferenceToName = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(difference)</span> {</span>

        <span class="hljs-keyword">if</span> (difference &gt; <span class="hljs-number">2.0</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'Ionic Bond'</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (difference &gt;= <span class="hljs-number">0.5</span> &lt; <span class="hljs-number">1.6</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'Polar Covalent Bond'</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> <span class="hljs-string">'NonPolar Covalent Bond'</span>;
        }

    };
});
</code></pre>
<p>Our controller creation then gets updated so that we are injecting the service into the parameter list. Next,
since $scope is our conduit for the view to talk to the service, we create a function on the controller that will
consume the service when we have two elements selected.</p>
<pre class="highlight"><code class="hljs javascript">chemistryApp.controller(<span class="hljs-string">'chemServiceCtrl'</span>, [<span class="hljs-string">'$scope'</span>, <span class="hljs-string">'chemistryService'</span>,
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chemServiceCtrl</span><span class="hljs-params">($scope, $log, chemistryService)</span> {</span>

        $scope.elements = periodicData.elements;

        $scope.calculateBondPolarity = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>

            <span class="hljs-keyword">if</span> ($scope.selectedElement1 &amp;&amp; $scope.selectedElement2) {

                $scope.currentBondDifference = chemistryService.calculateElectronegativityDifference($scope.selectedElement1, $scope.selectedElement2);
                $scope.currentBondType = chemistryService.convertElectronegativityDifferenceToName($scope.currentBondDifference);

            }

        };

        <span class="hljs-comment">/* private methods */</span>

    }]
);
</code></pre>
<p>Tying it all together, we have something like this.</p>
<div id="app" ng-app="chemistryApp">
<form name="submitForm" class="form-horizontal" ng-controller="chemServiceCtrl">
                <div class="form-group" style="margin-top:14px;">
                    <div class="control-label col-md-2">
                        Element 1:
                    </div>
                    <div class="col-md-4">
                        <select class="form-control" ng-model="selectedElement1" ng-options="e.name for e in elements | orderBy:[&apos;name&apos;]" ng-change="calculateBondPolarity()"></select>
                    </div>
                    <div class="control-label col-md-2">
                        Element 2:
                    </div>
                    <div class="col-md-4">
                        <select class="form-control" ng-model="selectedElement2" ng-options="e.name for e in elements  | orderBy:[&apos;name&apos;]" ng-change="calculateBondPolarity()"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6" style="text-align:center;" ng-show="selectedElement1">
                        You have selected:<br>
                        <strong>{{selectedElement1.name}}</strong><br>
                        Electronegativity:<br>
                        <strong>{{selectedElement1.electronegativity}}</strong>
                    </div>
                    <div class="col-md-6" style="text-align:center;" ng-show="selectedElement2">
                        You have selected:<br>
                        <strong>{{selectedElement2.name}}</strong><br>
                        Electronegativity:<br>
                        <strong>{{selectedElement2.electronegativity}}</strong>
                    </div>
                </div>
                        <div class="row rounded-group-box" ng-show="selectedElement1 &amp;&amp; selectedElement2">
                            <div class="col-md-12" style="text-align:center;">
                                <strong>{{selectedElement1.name}}</strong> + <strong>{{selectedElement2.name}}</strong> = <strong>{{currentBondType}}</strong><br><br>
                                <small>With a electronegativity difference of {{currentBondDifference | number:2}} {{selectedElement1.name}} and {{selectedElement2.name}} would form a {{currentBondType}}</small>
                            </div>
                        </div>

<p></p></form>
</div><p></p>
<p>We can now start to see how AngularJS provides a platform for creating web applications. With services, we are able to
encapsulate logic and use it within multiple controllers in our application.</p>
<p>You can either visit <a href="http://angularperiodic.azurewebsites.net/">http://angularperiodic.azurewebsites.net/</a> to see the code in action and
as always find the code out on <a href="https://github.com/jptacek/AngularPeriodic">GitHub</a>.</p>
<script type="text/javascript" src="/2014/05/angularJS-Intro-To-Services/js/chemistryApp.js"></script>
<script type="text/javascript" src="/2014/05/angularJS-Intro-To-Services/js/chemistryController.js"></script>
<script type="text/javascript" src="/2014/05/angularJS-Intro-To-Services/js/chemistryService.js"></script>
<script type="text/javascript" src="/2014/05/angularJS-Intro-To-Services/js/chemistry.js"></script>]]></content>
    </entry>
    
    <entry>
        <title>That Conference - Ways To Hack Your Day to Better Health</title>
        <link href="http://www.jptacek.com/2014/05/18/index/"/>
        <updated>2014-05-18T05:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-05-18,/2014/05/18/index/</id>
        <content type="html"><![CDATA[<p>I am honored to be speaking this year at That Conference. That Conference is a conference with national speakers held every
year in the Wisconsin Dells at the <a href="http://www.kalahariresorts.com/wisconsin">Kalahari Resort</a>. It is very high on the awesome scale,
and I wrote many words about it <a href="http://www.jptacek.com/2013/05/that-conference-2013/">last year</a>.
Tickets went on sale yesterday, and are $25 off for a week. Go forth, <a href="https://www.thatconference.com/Home/TicketRegistration">click</a>,
<a href="https://www.eventbrite.com/e/that-conference-2014-tickets-7410869109">buy</a> and come back, I need your help!</p>
<p><img src="http://www.jptacek.com/2014/05/18/index/thatConferenceLogo.png" alt="That Conference Logo"></p>
<p>This is the third year in a row I have had the chance to speak. For
the inaugural That Conference, I spoke on SharePoint claims based security, Windows Identity Foundation and Access Control
Services. You can find the slides on my <a href="http://www.jptacek.com//2012/08/that-conference-slide-deck/">site</a>.</p>
<p><img src="http://www.jptacek.com/2014/05/18/index/ThatConference-1024x681-300x199.jpg" alt="2012 That Conference"></p>
<p>Last year, I put on a tin foil hat, so aliens couldn&#39;t read my brain waves, and talked about Being You and managing your
digital identity on the web. I talked a lot about security, Azure Websites, WordPress and Two Factor authentication. You can also
 view that slide deck <a href="http://www.jptacek.com/2013/08/2013-that-conference-presentation/">here</a>.</p>
<p>This year, my presentation is entitled, You Can&#39;t Always Be Hiking - Ways to Hack Your Day to Better Health. You can read
more about it at the <a href="https://www.thatconference.com/Sessions/Session/2271">That Conference site</a>. Here is a copy of the
abstract</p>
<blockquote>
<p>Developers do awesome things by creating apps and web sites that make users go ooh and ahh (and possibly occasionally curse).
Despite doing awesome things for those around you, you generally are not doing awesome things for yourself. Sitting all day is
bad for you. Noshing pizza to rip through a late night code jam isn’t optimal eating. Missing sleep trying to ship code is
not great. In this presentation, we will talk through some ways developers can hack their day to better health with some simple steps
and ideas you can incorporate in your day to make sure you are still slinging code in the old folks home.</p>
</blockquote>
<p>I have several things I plan on talking about during presentation, but I would love to hear from other people. So in
 embracing the awesomeness of community that <a href="http://www.csell.net/">Clark Sell</a> and rest of the wizards at That Conference
 have created, give
 me some of your tips! What do you
do to keep healthy during the day? Feel free to sound off in the Disqus comments below with ideas and discussion!</p>
]]></content>
    </entry>
    
    <entry>
        <title>Madison .NET User Group - May 2014</title>
        <link href="http://www.jptacek.com/2014/05/08/index/"/>
        <updated>2014-05-08T00:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-05-08,/2014/05/08/index/</id>
        <content type="html"><![CDATA[<p>Thanks to everyone who came out to my <a href="http://www.meetup.com/MADdotNET/">Madison .NET User Group</a> presentation on AngularJS on May 7th,
2014.</p>
<p>Had a really nice turnout and the group was great to give a talk to! Engaging, with lots of good questions. They even humored me when
I went on a brief Lou Reed interlude!</p>
<p>You can find a copy of my slides on my site <a href="http://www.jptacek.com/2014/05/08/index/AngularJS.pptx">here</a>.</p>
<p>The code for my demo is available on <a href="http://www.github.com">GitHub</a> at <a href="https://github.com/jptacek/MadDotNet">https://github.com/jptacek/MadDotNet</a> along with
the slides.</p>
<p>There are also several blog posts I have written about Angular, <a href="http://www.jptacek.com/tags/angularjs/">http://www.jptacek.com/tags/angularjs/</a>. Also, for those
interested in learning more about DocPad, here is a post where I talked about moving over, <a href="http://www.jptacek.com/2013/12/saying-hello-to-docpad/">http://www.jptacek.com/2013/12/saying-hello-to-docpad/</a></p>
<p>As always, feel free to reach out to me via email (blog -@- jptacek.com) or on twitter, <a href="http://www.twitter.com/jptacek">@jptacek</a>.</p>
<p>To those of you who attended, thanks much!</p>
]]></content>
    </entry>
    
    <entry>
        <title>Milwaukee .NET User Group Presentation - April 2014</title>
        <link href="http://www.jptacek.com/2014/04/10/index/"/>
        <updated>2014-04-10T00:00:00.000Z</updated>
        <id>tag:www.jptacek.com,2014-04-10,/2014/04/10/index/</id>
        <content type="html"><![CDATA[<p>Thanks to everyone who came out to my <a href="http://wi-ineta.org/">Milwaukee .NET User Group</a> presentation on AngularJS this week
(April 8, 2014).
There was a
nice turnout and some good interactions and questions. I even got a little stressed out and winded, with the screen being in the
front of the room and my laptop with code demos in the back! Hopefully it wasn&#39;t too distracting for those of you
in attendance.</p>
<p>You can find a copy of my slides <a href="http://www.jptacek.com/2014/04/10/index/AngularJS-Ineta.pptx">here</a>.</p>
<p>The code for my demo is available on <a href="http://www.github.com">GitHub</a> at <a href="https://github.com/jptacek/Wi-Ineta-AngularJS">https://github.com/jptacek/Wi-Ineta-AngularJS</a></p>
<p>As always, feel free to reach out to me via email or on twitter.</p>
<p>To those of you who attended, thanks much!</p>
]]></content>
    </entry>
    
</feed>